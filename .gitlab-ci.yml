# Офіційний образ Gradle з підтримкою JDK 21 (для Java 21)
image: gradle:8.2.1-jdk21

# Визначаємо етапи пайплайну (по черзі): спочатку build, потім docker
stages:
  - build
  - docker

# Додаткові змінні середовища для CI
variables:
  DOCKER_DRIVER: overlay2  # Вказує тип драйвера Docker для коректної роботи всередині CI

# Команди, які виконуються перед кожним job'ом (опціонально)
before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle  # Використовуємо локальну папку для кешу Gradle

# --- ЕТАП 1: СБІРКА ПРОЕКТУ ---
build:
  stage: build
  script:
    - gradle build -x test  # Збирає проєкт без запуску тестів

# --- ЕТАП 2: СТВОРЕННЯ І ПУБЛІКАЦІЯ DOCKER-ОБРАЗУ ---
docker-build:
  stage: docker
  image: docker:latest  # Змінюємо образ на Docker CLI, бо зараз будемо працювати з Docker
  services:
    - docker:dind  # Docker-in-Docker — дозволяє запускати Docker всередині CI
  script:
    - docker build -t registry.gitlab.com/sta1485512/cofffeflashbackend:latest .  # Створюємо Docker-образ з тега `latest`
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com  # Вхід у GitLab Registry
    - docker push registry.gitlab.com/sta1485512/cofffeflashbackend:latest  # Публікуємо образ у GitLab Container Registry