# Офіційний образ Gradle з підтримкою JDK 21 (для Java 21)
#image: gradle:8.2.1-jdk17
image: eclipse-temurin:21-jdk

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - when: never

# Визначаємо етапи пайплайну (по черзі): спочатку build, потім docker
stages:
#  - build
#  - docker
  - deploy



# Додаткові змінні середовища для CI
variables:
  DOCKER_DRIVER: overlay2  # Вказує тип драйвера Docker для коректної роботи всередині CI

# Команди, які виконуються перед кожним job'ом (опціонально)
before_script:
  #- 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - apt-get update -y && apt-get install -y openssh-client bash
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
  - export GRADLE_USER_HOME=`pwd`/.gradle  # Використовуємо локальну папку для кешу Gradle

# --- ЕТАП 1: СБІРКА ПРОЕКТУ ---
build:
  stage: build
  script:
    - chmod +x ./gradlew
    - ./gradlew bootJar -x test  # Збирає проєкт без запуску тестів
  artifacts:
    paths:
      - build/libs/CoffeFlashBackend-0.0.1-SNAPSHOT.jar
    expire_in: 1 hour

# --- ЕТАП 2: СТВОРЕННЯ І ПУБЛІКАЦІЯ DOCKER-ОБРАЗУ ---
docker-build:
  stage: docker
  image: docker:latest  # Змінюємо образ на Docker CLI, бо зараз будемо працювати з Docker
  services:
    - docker:dind  # Docker-in-Docker — дозволяє запускати Docker всередині CI
  script:
    - docker build -t registry.gitlab.com/sta1485512/cofffeflashbackend:latest .  # Створюємо Docker-образ з тега `latest`
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com  # Вхід у GitLab Registry
    - docker push registry.gitlab.com/sta1485512/cofffeflashbackend:latest  # Публікуємо образ у GitLab Container Registry

deploy:
  stage: deploy
  image: debian:bullseye
  only:
    - main
  script:
    - apt-get update -y && apt-get install -y openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - ssh -o StrictHostKeyChecking=no deploy@162.55.59.75 "
      cd /opt/cofffeflashbackend &&
      git config --global --add safe.directory /opt/cofffeflashbackend &&
      git pull &&
      docker compose pull backend &&
      docker compose up -d backend
      "

#      docker container rm -f coffeflash || true &&
#      docker image rm registry.gitlab.com/sta1485512/cofffeflashbackend:latest || true &&
#      docker pull registry.gitlab.com/sta1485512/cofffeflashbackend:latest &&
#      docker run -d --name coffeflash -p 80:8080 registry.gitlab.com/sta1485512/cofffeflashbackend:latest